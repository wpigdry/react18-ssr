{"version":3,"file":"969.js","mappings":"+JAEA,SAASA,EAAYC,GACjB,IACIC,EADAC,EAAS,UAETC,EAAYH,EAAQI,MACnBC,IACGH,EAAS,UACTD,EAASI,CAAT,IAEHC,IACGJ,EAAS,QACTD,EAASK,CAAT,IAIR,OADAC,QAAQC,IAAIL,EAAW,aAChB,CACHM,OACI,GAAe,YAAXP,EACA,MAAMC,EACH,GAAe,UAAXD,EACP,MAAMD,EACH,GAAe,YAAXC,EACP,OAAOD,CAEd,EAER,CAGD,MAAMS,EAAeC,GACjB,IAAIC,SAASC,GACTC,YACI,IAAMD,EAAQ,CAAEF,KAAII,KAAO,KAAIJ,IAAMK,IAAK,GAAKL,KAC1C,IAALA,KAINM,EAAc,CAChB,EAAGlB,EAAYW,EAAY,IAC3B,EAAGX,EAAYW,EAAY,IAC3B,EAAGX,EAAYW,EAAY,KAiB/B,EARcQ,IACV,MACMC,EADWF,EAAYC,EAAMP,IACbF,OAGtB,OADAF,QAAQC,IAAI,WACL,qCAAaW,EAAKJ,KAAzB,C","sources":["webpack://react18-ssr/./src/components/user/index.jsx"],"sourcesContent":["import React from \"react\";\n\nfunction wrapPromise(promise) {\n    let status = \"pending\";\n    let result;\n    let suspender = promise.then(\n        (r) => {\n            status = \"success\";\n            result = r;\n        },\n        (e) => {\n            status = \"error\";\n            result = e;\n        }\n    );\n    console.log(suspender, 'suspender');\n    return {\n        read() {\n            if (status === \"pending\") {\n                throw suspender;\n            } else if (status === \"error\") {\n                throw result;\n            } else if (status === \"success\") {\n                return result;\n            }\n        },\n    };\n}\n\n// 网络请求，获取 user 数据\nconst requestUser = (id) =>\n    new Promise((resolve) =>\n        setTimeout(\n            () => resolve({ id, name: `用户${id}`, age: 10 + id }),\n            id * 2000\n        )\n    );\n\nconst resourceMap = {\n    1: wrapPromise(requestUser(1)),\n    3: wrapPromise(requestUser(3)),\n    5: wrapPromise(requestUser(5)),\n};\n\n// 使用Suspense必须返回一个会resolve ES Module的Promise(throw抛出错误的Promise)\n// throw抛出错误的Promise，为了打断子树渲染，这里直接抛错出去，发现是Pending状态后就会去渲染fallback，并持续等待Promise的状态变更，持续流式渲染状态\n// 区别对待不同网络环境（数据返回快的话压根不会出现fallback-loading）\n\n// rm -rf node_modules 删掉重新下载 不然dist有额外的user文件\n\nconst User = (props) => {\n    const resource = resourceMap[props.id];\n    const user = resource.read();\n\n    console.log('ppppppp');\n    return <div>当前用户是: {user.name}</div>;\n};\n\nexport default User;\n"],"names":["wrapPromise","promise","result","status","suspender","then","r","e","console","log","read","requestUser","id","Promise","resolve","setTimeout","name","age","resourceMap","props","user"],"sourceRoot":""}